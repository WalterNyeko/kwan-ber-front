{"ast":null,"code":"import _objectSpread from \"/Users/walternyeko/Desktop/GraphQL/setting-react-project-with-graphQL/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport { ApolloClient } from 'apollo-client';\nimport { InMemoryCache } from 'apollo-cache-inmemory';\nimport { createHttpLink } from 'apollo-link-http';\nimport { setContext } from 'apollo-link-context';\nconst applicationLink = process.env.REACT_APP_APP_LINK;\nconst authLink = setContext((_, {\n  headers\n}) => {\n  const token = localStorage.getItem('jwt-token');\n  return {\n    headers: _objectSpread({}, headers, {\n      authorization: token ? \"JWT \".concat(token) : ''\n    })\n  };\n});\nconst httpLink = createHttpLink({\n  uri: applicationLink\n});\nconst client = new ApolloClient({\n  link: authLink.concat(httpLink),\n  cache: new InMemoryCache()\n});\nexport default client;","map":{"version":3,"sources":["/Users/walternyeko/Desktop/GraphQL/setting-react-project-with-graphQL/src/graphql/index.js"],"names":["ApolloClient","InMemoryCache","createHttpLink","setContext","applicationLink","process","env","REACT_APP_APP_LINK","authLink","_","headers","token","localStorage","getItem","authorization","httpLink","uri","client","link","concat","cache"],"mappings":";AAAA,SAASA,YAAT,QAA6B,eAA7B;AACA,SAASC,aAAT,QAA8B,uBAA9B;AACA,SAASC,cAAT,QAA+B,kBAA/B;AACA,SAASC,UAAT,QAA2B,qBAA3B;AAEA,MAAMC,eAAe,GAAGC,OAAO,CAACC,GAAR,CAAYC,kBAApC;AAEA,MAAMC,QAAQ,GAAGL,UAAU,CAAC,CAACM,CAAD,EAAI;AAAEC,EAAAA;AAAF,CAAJ,KAAmB;AAE3C,QAAMC,KAAK,GAAGC,YAAY,CAACC,OAAb,CAAqB,WAArB,CAAd;AAEA,SAAO;AACHH,IAAAA,OAAO,oBACAA,OADA;AAEHI,MAAAA,aAAa,EAAEH,KAAK,iBAAUA,KAAV,IAAmB;AAFpC;AADJ,GAAP;AAMH,CAV0B,CAA3B;AAYA,MAAMI,QAAQ,GAAGb,cAAc,CAAC;AAC5Bc,EAAAA,GAAG,EAAEZ;AADuB,CAAD,CAA/B;AAIA,MAAMa,MAAM,GAAG,IAAIjB,YAAJ,CAAiB;AAC5BkB,EAAAA,IAAI,EAAEV,QAAQ,CAACW,MAAT,CAAgBJ,QAAhB,CADsB;AAE5BK,EAAAA,KAAK,EAAE,IAAInB,aAAJ;AAFqB,CAAjB,CAAf;AAKA,eAAegB,MAAf","sourcesContent":["import { ApolloClient } from 'apollo-client';\nimport { InMemoryCache } from 'apollo-cache-inmemory';\nimport { createHttpLink } from 'apollo-link-http';\nimport { setContext } from 'apollo-link-context';\n\nconst applicationLink = process.env.REACT_APP_APP_LINK;\n\nconst authLink = setContext((_, { headers }) =>{\n\n    const token = localStorage.getItem('jwt-token');\n\n    return {\n        headers: { \n            ...headers,\n            authorization: token ? `JWT ${token}`: ''\n        }\n    }\n});\n\nconst httpLink = createHttpLink({\n    uri: applicationLink,\n});\n\nconst client = new ApolloClient({\n    link: authLink.concat(httpLink),\n    cache: new InMemoryCache()\n});\n\nexport default client;\n"]},"metadata":{},"sourceType":"module"}